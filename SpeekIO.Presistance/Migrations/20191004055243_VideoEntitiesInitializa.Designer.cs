// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpeekIO.Presistence.Context;

namespace SpeekIO.Presistence.Migrations
{
    [DbContext(typeof(SpeekIOContext))]
    [Migration("20191004055243_VideoEntitiesInitializa")]
    partial class VideoEntitiesInitializa
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SpeekIO.Domain.Entities.CommunicationEntities.ConferenceSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowRecordingOfHost");

                    b.Property<bool>("AllowRecordingOfParticipants");

                    b.Property<bool>("AutoAcceptConference");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("EnableAudio");

                    b.Property<bool>("EnableVideo");

                    b.Property<bool>("IsBroadcast");

                    b.Property<bool>("IsPublic");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<bool>("RecordAutomatically");

                    b.Property<string>("ResolutionHeight");

                    b.Property<string>("ResolutionWidth");

                    b.Property<DateTime>("ScheduledEndTime");

                    b.Property<DateTime>("ScheduledStartTime");

                    b.Property<string>("SessionIdentifier");

                    b.Property<int>("State");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("ConferenceSession","Communication");
                });

            modelBuilder.Entity("SpeekIO.Domain.Entities.CommunicationEntities.ConferenceSessionEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ConferenceSessionId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("EventType");

                    b.Property<string>("Message");

                    b.Property<DateTime>("ModifiedOn");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceSessionId");

                    b.HasIndex("Id");

                    b.ToTable("ConferenceSessionEvent","Communication");
                });

            modelBuilder.Entity("SpeekIO.Domain.Entities.CommunicationEntities.Connection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsWebRtcSupported");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<long?>("ParticipantId");

                    b.Property<string>("ReferrerUrl");

                    b.Property<int>("State");

                    b.Property<string>("Url");

                    b.Property<string>("UserAgent");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Connection","Communication");
                });

            modelBuilder.Entity("SpeekIO.Domain.Entities.CommunicationEntities.Participant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("JoinedOn");

                    b.Property<DateTime?>("LeftOn");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<int>("ParticipantType");

                    b.Property<DateTime?>("RequestedToJoinOn");

                    b.Property<string>("ResolutionHeight");

                    b.Property<string>("ResolutionWidth");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Participant","Communication");
                });

            modelBuilder.Entity("SpeekIO.Domain.Entities.CommunicationEntities.RecordSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("EnableAudio");

                    b.Property<bool>("EnableVideo");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<long?>("ParticipantId");

                    b.Property<string>("ResolutionHeight");

                    b.Property<string>("ResolutionWidth");

                    b.Property<string>("SessionIdentifier");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("RecordSession","Communication");
                });

            modelBuilder.Entity("SpeekIO.Domain.Entities.CommunicationEntities.SessionArchive", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ArchiveId");

                    b.Property<long?>("ConferenceSessionId");

                    b.Property<long>("CreatedAt");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long>("Duration");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("PartnerId");

                    b.Property<string>("Password");

                    b.Property<string>("Reason");

                    b.Property<long?>("RecordSessionId");

                    b.Property<string>("SessionId");

                    b.Property<long>("Size");

                    b.Property<int>("Status");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceSessionId");

                    b.HasIndex("Id");

                    b.HasIndex("RecordSessionId");

                    b.ToTable("SessionArchive","Communication");
                });

            modelBuilder.Entity("SpeekIO.Domain.Entities.CommunicationEntities.ConferenceSessionEvent", b =>
                {
                    b.HasOne("SpeekIO.Domain.Entities.CommunicationEntities.ConferenceSession", "ConferenceSession")
                        .WithMany("ConferenceSessionEvents")
                        .HasForeignKey("ConferenceSessionId");
                });

            modelBuilder.Entity("SpeekIO.Domain.Entities.CommunicationEntities.Connection", b =>
                {
                    b.HasOne("SpeekIO.Domain.Entities.CommunicationEntities.Participant", "Participant")
                        .WithMany("Connections")
                        .HasForeignKey("ParticipantId");
                });

            modelBuilder.Entity("SpeekIO.Domain.Entities.CommunicationEntities.RecordSession", b =>
                {
                    b.HasOne("SpeekIO.Domain.Entities.CommunicationEntities.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId");
                });

            modelBuilder.Entity("SpeekIO.Domain.Entities.CommunicationEntities.SessionArchive", b =>
                {
                    b.HasOne("SpeekIO.Domain.Entities.CommunicationEntities.ConferenceSession")
                        .WithMany("Archives")
                        .HasForeignKey("ConferenceSessionId");

                    b.HasOne("SpeekIO.Domain.Entities.CommunicationEntities.RecordSession")
                        .WithMany("Archives")
                        .HasForeignKey("RecordSessionId");
                });
#pragma warning restore 612, 618
        }
    }
}
